# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _getaddr
else:
    import _getaddr

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class seq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_getaddr.seq_handle_get, _getaddr.seq_handle_set)

    def __init__(self):
        _getaddr.seq_swiginit(self, _getaddr.new_seq())
    __swig_destroy__ = _getaddr.delete_seq

# Register seq in _getaddr:
_getaddr.seq_swigregister(seq)

class uniform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_getaddr.uniform_handle_get, _getaddr.uniform_handle_set)
    max = property(_getaddr.uniform_max_get, _getaddr.uniform_max_set)

    def __init__(self, max):
        _getaddr.uniform_swiginit(self, _getaddr.new_uniform(max))
    __swig_destroy__ = _getaddr.delete_uniform

# Register uniform in _getaddr:
_getaddr.uniform_swigregister(uniform)

class getaddr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addrs(self):
        while True:
            a = self.next()
            if a == -1:
                break;
            yield(a)


    def next(self):
        return _getaddr.getaddr_next(self)

    def __init__(self):
        _getaddr.getaddr_swiginit(self, _getaddr.new_getaddr())
    __swig_destroy__ = _getaddr.delete_getaddr

# Register getaddr in _getaddr:
_getaddr.getaddr_swigregister(getaddr)

class mixed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_getaddr.mixed_handle_get, _getaddr.mixed_handle_set)

    def __init__(self):
        _getaddr.mixed_swiginit(self, _getaddr.new_mixed())

    def add(self, src, p, base):
        src.thisown = False
        mixed_do_add(self, src, p, base);


    def alloc(self):
        return _getaddr.mixed_alloc(self)
    __swig_destroy__ = _getaddr.delete_mixed

# Register mixed in _getaddr:
_getaddr.mixed_swigregister(mixed)


def mixed_do_add(_self, g, p, base):
    return _getaddr.mixed_do_add(_self, g, p, base)
class trace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_getaddr.trace_handle_get, _getaddr.trace_handle_set)
    eof = property(_getaddr.trace_eof_get, _getaddr.trace_eof_set)
    single = property(_getaddr.trace_single_get, _getaddr.trace_single_set)

    def __init__(self, file):
        _getaddr.trace_swiginit(self, _getaddr.new_trace(file))
    __swig_destroy__ = _getaddr.delete_trace

# Register trace in _getaddr:
_getaddr.trace_swigregister(trace)

class log(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_getaddr.log_handle_get, _getaddr.log_handle_set)

    def __init__(self, src, file):
        _getaddr.log_swiginit(self, _getaddr.new_log(src, file))
    __swig_destroy__ = _getaddr.delete_log

# Register log in _getaddr:
_getaddr.log_swigregister(log)

class scramble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_getaddr.scramble_handle_get, _getaddr.scramble_handle_set)
    eof = property(_getaddr.scramble_eof_get, _getaddr.scramble_eof_set)

    def __init__(self, src, max):
        _getaddr.scramble_swiginit(self, _getaddr.new_scramble(src, max))
    __swig_destroy__ = _getaddr.delete_scramble

# Register scramble in _getaddr:
_getaddr.scramble_swigregister(scramble)



